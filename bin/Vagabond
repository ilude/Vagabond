#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'vagabond'

include GLI

program_desc Vagabond::DESCRIPTION

version Vagabond::VERSION

desc 'Print Vagabond Version'
switch [:v,:version]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'Create a new virtual machine image'
arg_name 'The name of the virtual machine'
command :mkbox do |c|
  c.desc 'Overwrite existing virtual machine if it exists'
  c.switch [:f, :force]

  c.desc 'The name of the template to use'
  c.default_value 'ubuntu-12.04-server-amd64'
  c.flag [:t, :template]

  c.desc 'The number of cpus to configure the new box with'
  c.flag [:cpus]

  c.desc 'Megabytes of memory to configure the new box with'
  c.flag [:memory]

  c.desc 'Megabytes of disk space to configure the new box with'
  c.flag [:disk_size]

  c.action do |global_options,options,args|
    if args.length < 1
      raise 'You must specify the name of your VM'
    end

    if options[:f]
      box = Vagabond::Box.find(args[0])
      box.destroy if !box.nil?
    end
    begin
      box = Vagabond::Box.create(args[0], options, Vagabond::Environment.new) 
      box.build
    rescue Exception => e
      puts "Error during processing: #{$!}"
      puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}"
    end
  end
end

desc 'Destroy a virtual machine image'
arg_name 'The name of the virtual machine'
command :rmbox do |c|
  c.action do |global_options,options,args|
    box = Vagabond::Box.find(args[0])
    box.destroy if !box.nil?
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  if global[:v]
    puts "Vagabond: #{Vagabond::VERSION}"
    puts "VirtualBox: #{Vagabond::VM::Commands.version}"
    false
  else
    true
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
